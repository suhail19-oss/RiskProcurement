from fastapi import APIRouter
from pydantic import BaseModel
from typing import Dict, List, Optional
from io import BytesIO
from fastapi.responses import StreamingResponse
from reportlab.platypus import Image

# ReportLab imports
from reportlab.lib.pagesizes import A4
from reportlab.platypus import (
    SimpleDocTemplate,
    Paragraph,
    Spacer,
    Table,
    TableStyle
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.mime.text import MIMEText
import smtplib

from dotenv import load_dotenv
import os
load_dotenv()

router = APIRouter( ) 

class ESGReportInput(BaseModel):
    company_name: str
    esg_score: float
    cost_score: float
    risk_score: float
    reliability_score: float
    aiSuggestionE: str
    aiSuggestionS: str
    aiSuggestionG: str
    aiSuggestionC: str

# ...existing code...

@router.post("/generate-esg-report")
async def generate_esg_report(data: ESGReportInput):
    # 1. Create PDF buffer
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    elements = []

    # 2. Title
    title_style = ParagraphStyle(
        name="TitleStyle",
        fontSize=20,
        leading=24,
        spaceAfter=20,
        alignment=1,  # Centered
        textColor=colors.HexColor("#0B3954"),
    )
    elements.append(Paragraph(f"ESG Evaluation Report - {data.company_name}", title_style))
    elements.append(Spacer(1, 20))

    # 3. Scores Table
    elements.append(Paragraph("Overall Scores", styles["Heading2"]))
    scores_table_data = [
        ["Metric", "Score (/100)"],
        ["ESG Score", f"{data.esg_score:.2f}"],
        ["Cost Efficiency Score", f"{data.cost_score:.2f}"],
        ["Risk Score", f"{data.risk_score:.2f}"],
        ["Reliability Score", f"{data.reliability_score:.2f}"],
    ]
    table = Table(scores_table_data, hAlign='LEFT', colWidths=[220, 150])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#0B3954")),
        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 20))

    # 4. AI Suggestions Section
    suggestion_title_style = ParagraphStyle(
        name="SuggestionTitleStyle",
        fontSize=15,
        leading=18,
        spaceAfter=10,
        textColor=colors.HexColor("#0B3954"),
        fontName="Helvetica-Bold"
    )
    suggestion_text_style = ParagraphStyle(
        name="SuggestionTextStyle",
        fontSize=11,
        leading=15,
        spaceAfter=15,
        textColor=colors.HexColor("#222222"),
        fontName="Helvetica"
    )

    elements.append(Paragraph("AI Recommendations", suggestion_title_style))

    elements.append(Paragraph("Environmental (E):", suggestion_title_style))
    elements.append(Paragraph(data.aiSuggestionE.replace('\n', '<br/>'), suggestion_text_style))

    elements.append(Paragraph("Social (S):", suggestion_title_style))
    elements.append(Paragraph(data.aiSuggestionS.replace('\n', '<br/>'), suggestion_text_style))

    elements.append(Paragraph("Governance (G):", suggestion_title_style))
    elements.append(Paragraph(data.aiSuggestionG.replace('\n', '<br/>'), suggestion_text_style))

    elements.append(Paragraph("Cost & Reliability (C):", suggestion_title_style))
    elements.append(Paragraph(data.aiSuggestionC.replace('\n', '<br/>'), suggestion_text_style))

    # 5. Footer
    elements.append(Spacer(1, 20))
    elements.append(Paragraph("Generated by ProcurePro", styles["Italic"]))

    # 6. Build PDF
    doc.build(elements)
    buffer.seek(0)
    pdf_bytes = buffer.getvalue()

    # 7. Prepare and send email
    msg = MIMEMultipart()
    msg["From"] = "ayukumar242004@gmail.com"
    msg["To"] = "tbsingh4249@gmail.com"
    msg["Subject"] = f"ESG Report for {data.company_name}"
    msg.attach(MIMEText("Hello,\n\nPlease find attached the ESG report.\n\nRegards,\nProcurePro"))

    part = MIMEApplication(pdf_bytes, Name=f"{data.company_name}_ESG_Report.pdf")
    part["Content-Disposition"] = f'attachment; filename="{data.company_name}_ESG_Report.pdf"'
    msg.attach(part)

    smtp = smtplib.SMTP("smtp.gmail.com", 587)
    smtp.starttls()
    smtp_email = os.environ["SMTP_EMAIL"]
    smtp_password = os.environ["SMTP_PASSWORD"]
    smtp.login(smtp_email, smtp_password)
    smtp.sendmail(msg["From"], [msg["To"]], msg.as_string())
    smtp.quit()

    # 8. Return PDF to frontend
    buffer.seek(0)
    return StreamingResponse(
        buffer,
        media_type="application/pdf",
        headers={
            "Content-Disposition": f'attachment; filename="{data.company_name}_ESG_Report.pdf"'
        },
    )